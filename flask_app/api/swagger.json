{
  "swagger": "2.0",
  "info": {
    "description": "Discoveringworld API documentation <br> <br> For Authorization header use following format `Bearer`+`spase`+`Authorization Token`<br><br> Athentication token should be added in header in each request when call secure REST API endpoint.",
    "version": "1.0.0",
    "title": "Golang Service Pack REST API",
    "contact": {
      "email": "info@cactus.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "localhost:9090",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "Security",
      "description": ""
    },
    {
      "name": "Users",
      "description": "(All information about Users)"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/register": {
      "post": {
        "tags": [
          "Security"
        ],
        "summary": "Register new user",
        "description": "Register new user in service",
        "operationId": "register",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "data",
            "description": "Login details",
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "password_confirmation": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "Security"
        ],
        "summary": "Login and get Token",
        "description": "Login and get authorization JWT token",
        "operationId": "login",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "data",
            "description": "Login details",
            "schema": {
              "type": "object",
              "properties": {
                "login": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get users list",
        "description": "Return all users list",
        "operationId": "all_users",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "400": {
            "description": "Bad request"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get specific user by ID",
        "description": "",
        "operationId": "getUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID to get",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID to get",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "data",
            "description": "Update user data",
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "400": {
            "description": "Invalid movie supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete user",
        "description": "",
        "operationId": "deletUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/log": {
      "post": {
        "tags": [
          "Logging"
        ],
        "summary": "Send data to logging service",
        "description": "Recieve, validate & send data to logging service",
        "operationId": "log",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "data",
            "description": "Data to be logged (multiple key-value pairs can be sent)",
            "schema": {
              "type": "object",
              "properties": {
                "field1": {
                  "type": "string"
                },
                "field2": {
                  "type": "string"
                },
                "field3": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Server error"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "description": "Date of user creation"
        },
        "updated_at": {
          "type": "string",
          "description": "Date of user updates"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "object",
          "properties": {
            "code": {
              "type": "integer"
            },
            "message": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}